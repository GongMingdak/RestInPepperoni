#include "pfm.h"
#include "stdio.h"
#include <sys/stat.h>

PagedFileManager* PagedFileManager::_pf_manager = 0;

PagedFileManager* PagedFileManager::instance() {
    if(!_pf_manager)
        _pf_manager = new PagedFileManager();

    return _pf_manager;
}


PagedFileManager::PagedFileManager() {
}


PagedFileManager::~PagedFileManager() {
}


RC PagedFileManager::createFile(const string &fileName) {
    struct stat info;
    if(stat(fileName.c_str(), &info) == 0){
        return -1;
    }
    
    FILE* fpCreateFile = fopen(fileName.c_str(), "w");
    if(fpCreateFile == NULL){
        return -1;
    }

    fclose(fpCreateFile);
    return 0;
}


RC PagedFileManager::destroyFile(const string &fileName) {
    struct stat info;
    if(stat(fileName.c_str(), &info) == 0){
        return -1;
    }
    if( remove(fileName.c_str()) !=0 ){
        return -1;
    }
    return 0;
    
}

RC PagedFileManager::openFile(const string &fileName, FileHandle &fileHandle) {
    struct stat info;
    if(stat(fileName.c_str(), &info) == 0){
        return -1;
    }

    if(fileHandle.openFile != NULL){
        return -1;
    }
    
    fileHandle.openFile = fopen(fileName.c_str(), "r+");
    if(fileHandle.openFile == NULL){
       return -1;
    }
    return 0;
}


RC PagedFileManager::closeFile(FileHandle &fileHandle) {
    if(fileHandle.openFile == NULL){
        return -1;
    }
    
    fclose(fileHandle.openFile);
    return 0;
}


FileHandle::FileHandle() {
    readPageCounter = 0;
    writePageCounter = 0;
    appendPageCounter = 0;
    fileSize = 0;
    openFile = NULL;
}


FileHandle::~FileHandle() {
    
}


RC FileHandle::readPage(PageNum pageNum, void *data) {
    
    return -1;
}


RC FileHandle::writePage(PageNum pageNum, const void *data) {
    return -1;
}


RC FileHandle::appendPage(const void *data) {
    return -1;
}


unsigned FileHandle::getNumberOfPages() {
    return -1;
}


RC FileHandle::collectCounterValues(unsigned &readPageCount, unsigned &writePageCount, unsigned &appendPageCount) {
	return -1;
}
